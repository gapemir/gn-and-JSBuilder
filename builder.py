import json
import os
import sys
import hashlib
import datetime
import time
#import builder1
import builder2
VERSION = "1.0.0"




BUF_SIZE = 65536  # lets read stuff in 64kb chunks!

def calc_file_sha256(filename):
    md5 = hashlib.md5()
    sha1 = hashlib.sha1()
    with open(filename, "rb") as f:
        while True:
            data = f.read(BUF_SIZE)
            if not data:
                break
            md5.update(data)
            sha1.update(data)
    return md5.hexdigest(), sha1.hexdigest()
#NO SPACES
def print_help():
    print("Usage: JS_builder [OPTIONS]...")
    print("Options:")
    print("  -d, --rundir Dir in which JSBuilder is located")
    print("  -c, --config Confil gile for JSBuilder, default builder.conf")
    print("       note that -d is prepended to -c")
    print("  -h, --help  Show this help message")
    print("  -v, --version  Show version")
    #print("  -q, --quiet   Quiet mode")
    print("Example of Builder.conf:")
    print(" version=1.0.0")
    print(" strict=true")
    print(" src=js_src/")
    print(" out=gn.js\n")
    print(" file1.js")
    print(" file2.js")
    print("note that curently user needs to ensure that there with correct files processed first")

def print_version():
    print("JS_builder: "+VERSION)

def readBuilderBinary(runDir):
    privFold = runDir + ".bdata/"
    map = {}
    if not os.path.isfile(privFold+".data"):
        return map
    with open(privFold+".data", "r") as f:
        map = json.load(f)
    return map

def writeBuilderBinary(map, runDir):
    privFold = runDir + ".bdata/"
    with open(privFold+".data", "w") as f:
        json.dump(map, f, indent=2)

def allnamespaces(namespaces: list[str]):
    newNamespaces = []
    for namespace in namespaces:
        split = namespace.split(".")
        prev = split[0]
        if prev not in newNamespaces:
            newNamespaces.append(prev)
        for s in split[1:]:
            prev += "." + s
            if prev not in newNamespaces:
                newNamespaces.append(prev)
    return newNamespaces

def write(codelst : list[str], namespaces : list[str], out, rundir, strict):
    with open(rundir + out, "w", encoding='utf-8') as fout:
        fout.write("// This file is auto-generated by JS_builder v"+VERSION+"\n")
        fout.write("// Build time: " + str(datetime.datetime.now()) + "\n\n")
        defNamespaces = allnamespaces(namespaces)
        if strict:
            fout.write("\"use strict\"\n")
        fout.write("var " + defNamespaces[0] + " = {}\n")

        for namespace in defNamespaces[1:]:
            fout.write("if (!" + namespace + ") " + namespace + " = {}\n")
        fout.write("\n\n")
        for form in codelst:
            fout.write(form)

def writeObjFile(codelst : str, namespaceFile : str, namespace : str, rundir : str):
    with open(rundir + ".bdata/" + namespaceFile + ".obj", "w", encoding='utf-8') as fout:
        fout.write("// This file is auto-generated and used by JS_builder v"+VERSION+"\n")
        fout.write(namespace + "\n")
        for form in codelst:
            fout.write(form)

def build(files, needToBuild, runDir, src):
    namespaces: list[str] = []
    allFormated: list[str] = []

    for filename in files:
        if filename not in needToBuild:
            with open(runDir + ".bdata/" + filename + ".obj", "r", encoding='utf-8') as fin:
                fin.readline()  # skip first line
                namespaces.append(fin.readline().strip())
                allFormated.append(fin.read())
        else:
            print("Processing " + filename)
            code, namespace = builder2.build(filename, runDir, src)
            namespaces.append(namespace)
            allFormated.append(code)
            writeObjFile(code, filename, namespace, runDir)
    print("Namespaces: " + str(namespaces))
    return allFormated, namespaces


def main():
    conf = "builder.conf"
    runDir = "./"
    i = 1
    while i<len(sys.argv):
        match sys.argv[i].lower():
            case "-h" | "--help":
                print_help()
                return
            case "-v" | "--version":
                print_version()
                return
            case "-c" | "--config":
                conf = sys.argv[i]
                i+=1
            case "-d" | "--rundir":
                i+=1
                runDir = sys.argv[i]
            case _:
                print_help()
                return
        i+=1
    
    if runDir[-1] != "/":
        runDir = runDir + "/"

    if not os.path.isdir(runDir+".bdata"):
        os.mkdir(runDir+".bdata")

    oldHashes = readBuilderBinary(runDir)
    #oldHashes = {}
    newHashes = {}

    configFile = open(runDir+conf,"r", encoding="utf-8")
    multilineComment = False
    version = None
    src = "."
    out = "./out.js"
    strict = False
    needToBuild = []
    files = []
    while line := configFile.readline():
        line = line.strip()
        if line.startswith("#") or line.startswith("//") or multilineComment or not line:
            continue
        if line.startswith("/*"):
            multilineComment = True
            continue
        if "*/" in line:
            multilineComment = False
            continue
        if line.startswith("version"):
            version = line.split("=")[1].strip()
        elif line.startswith("strict"):
            strict = line.split("=")[1].strip().lower() == "true"
        elif line.startswith("src"):
            src = line.split("=")[1].strip()
        elif line.startswith("out"):
            out = line.split("=")[1].strip()
        elif ".js" in line:
            files.append(line)
            newHashes[line]= calc_file_sha256(runDir+src+line)
            if not oldHashes.get(line) or newHashes.get(line)[0] != oldHashes.get(line)[0] or not oldHashes.get(line) or newHashes.get(line)[1] != oldHashes.get(line)[1] or not os.path.isfile(runDir + ".bdata/" + line + ".obj"):
                needToBuild.append(line)
                print("File " + line + " needs to be built")
        else:
            print("error parsing config line:"+line)
            print("exiting")
            return

    if needToBuild:
        writeBuilderBinary(newHashes, runDir)
        print("Building " + out)
        #builder0.build(files, out, runDir)
        #codelst, namespaces = builder2.build(files, runDir, src)
        allFormated, namespaces = build(files, needToBuild, runDir, src)
        write(allFormated, namespaces, out, runDir, strict)
        #codelst, namespaces = builder2.build(["./js_src/lang.js"], runDir)
        #write(codelst, namespaces, out, runDir, strict)
    else:
        print("nothing to be done")



if __name__ == "__main__":
    start_time = time.time()
    main()
    print("--- %s seconds ---" % (time.time() - start_time))
