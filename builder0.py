#first try using mainly regex and ZERO tokenitzer

import re
import datetime

def find_all(a_str, sub):
    start = 0
    while True:
        start = a_str.find(sub, start)
        if start == -1: return
        yield start
        start += len(sub)

def build(files: list[str], out, runDir):
    defNamespaces = []
    currNamespace = ""
    spacesToRem = 0
    inClass = False;
    with (open(runDir+".bdata/tmp", "w", encoding='utf-8') as fout):
        for filename in files:
            with open(runDir+filename, "r", encoding='utf-8') as fin:
                while line := fin.readline():
                    if line.strip().startswith("//") or not line.strip():
                        continue
                    ##line = line.replace("\n", "")
                    line = line.rstrip()
                    copy = re.sub(r'".*"|\'.*\'|`.*`', "", line)
                    if line.strip().startswith("namespace"):
                        line = line.strip()
                        currNamespace = line[10:line.index("{")].strip()
                        inClass = False
                        if currNamespace not in defNamespaces:
                            splIndx = find_all(line, ".")
                            for indx in splIndx:
                                if line[10:indx] not in defNamespaces:
                                    defNamespaces.append(line[10:indx])
                            defNamespaces.append(currNamespace)
                    elif " class " in copy or "class " in copy:
                    #elif (" class " in line and (not(re.match(r".*\".*class.*\".*", line))) or re.match(r".*\'.*class.*\.*", line) or re.match(r".*\`.*class.*\`.*", line)) or line.strip().startswith("class "):
                        inClass = True
                        spacesToRem = line.index("class")
                        if("extends" in line):
                            line = currNamespace + "." + line[line.index("class")+6:line.index("extends")] + "= class " + line[line.index("extends"):line.index("{")] + " {"
                        else:
                            line = currNamespace + "." + line[line.index("class ")+6:line.index("{")] + "= class {"
                        fout.write(line+"\n")
                        print(line)
                    else:
                        line = line[spacesToRem:]
                        if line == "}":
                            inClass = False
                            #continue
                        if not inClass:
                            if re.match("[a-zA-Z0-9_]", line):
                                line = currNamespace + "." + line
                            if "{" in line:
                                inClass = True
                        fout.write(line+"\n")
                        print(line)
    defNamespaces.sort()
    print("writing to " + runDir+out)
    with open(runDir+out, "w", encoding='utf-8') as fout:
        fout.write("// This file is auto-generated by JS_builder\n")
        fout.write("// Build time: " + str(datetime.datetime.now()) + "\n")
        fout.write("// Source files: " + str(files) + "\n\n")
        fout.write("var "+ defNamespaces[0] +"\n")

        for namespace in defNamespaces:
            fout.write("if (!"+namespace + ") "+namespace+" = {}\n")
        fout.write("\n\n")
        with open(runDir+".bdata/tmp", "r", encoding='utf-8') as ftmp:
            while line := ftmp.readline():
                fout.write(line)